import numpy as np
import matplotlib.pyplot as plt
from lianji_control.utils import distance


def cal_equation():
    height_ = [
0,0.7,1.08,1.4,1.96,2.4,2.8,3.3,3.82,4.2,4.6,5.1,5.48,5.9,6.3,6.7,7.26,7.5,7.84,8.3,8.92,9.1,9.42,9.8,
10.34,10.6,10.9,11.2,11.82,11.96,12.3,12.64,13.2,13.3,13.68,13.9,14.4,14.6,14.88,15.22,15.6,15.9,
16.2,16.44,16.8,17.06,17.42,17.7,18,18.2,18.54,18.8,19.1,19.36,19.7,20,20.3,20.5,20.7,21,21.4,21.58,
21.86,22.1,22.3,22.62,22.8,23.1,23.44,23.6,23.86,24.16,24.4,24.62,24.94,25.2,25.4,25.6,25.88,26.1,
26.44,26.56,26.7,26.98,27.36,27.5,27.7,27.94,28.24,28.4,28.6,28.8,29.2,29.26,29.5,29.7,30,30.2,
30.3,30.6,30.9,31,31.12,31.4,31.7,31.8,31.96,32.2,32.5,32.7,32.8,33,33.3,33.4,33.56,33.8,34,
34.2,34.3,34.6,34.74,35.04,35.1,35.4,35.6,35.7,35.8,36,36.26,36.4,36.52,36.8,36.96,37.1,37.36,37.5,
37.7,37.86,38.04,38.16,38.42,38.5,38.7,38.9,39.1,39.16,39.46,39.52,39.82,39.9,40,40.26,40.48,40.56,40.72,
40.8,41.1,41.24,41.3,41.5,41.7,41.9,41.98,42.1,42.36,42.4,42.6,42.7,42.92,43.04,43.24,43.4,43.52,43.7,43.9,
44,44.1,44.2,44.34,44.56,44.74,44.84,44.94,45.1,45.34,45.4,45.6,45.7,45.84,45.94,46.1,46.2,46.42,46.5,
46.6,46.8,46.96,47,47.22,47.26,47.5,47.6,47.7,47.8,47.92,48.1,48.2,48.3,48.5,48.6,48.8,48.9,49.02,49.2,
49.3,49.4,49.54,49.6,49.7,49.9,50.02,50.14,50.26,50.4,50.52,50.62,50.76,50.88,51,51.1,51.2,51.32,51.42,
51.54,51.64,51.8,51.9,52,52.1,52.2,52.4,52.5,52.6,52.7,52.8,52.9,53.1,53.2,53.26,53.34,53.5,53.6,53.7,
53.8,53.9,54,54.1,54.3,54.38,54.5,54.6,54.66,54.78,54.9,54.96,55.1,55.2,55.3,55.4,55.5,55.6,55.7,55.8,55.9,55.94,
56.1,56.22,56.3,56.4,56.5,56.6,56.66,56.7,56.8,56.96,57,57.1,57.24,57.32,57.42,57.5,57.6,57.7,57.8,57.9,57.96,58.08
]
    r_ = [i for i in np.arange(0,len(height_)/8,0.125)]
    f1 = np.polyfit(height_, r_, 17)
    p1 = np.poly1d(f1)
    # r = p1(height)
    return p1


@distance
def cal_circle(fit_equation,height):
    if height >= 58.08:
        raise ValueError("超过可上升最大高度")
    if height < 0:
        raise ValueError("上升高度不可为负值")
    r = fit_equation(height)
    return r


if __name__ == "__main__":
    fun = cal_equation()
    print(fun)
    res = cal_circle(fun,22)
    print(res)

